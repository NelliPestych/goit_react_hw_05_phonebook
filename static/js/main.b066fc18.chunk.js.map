{"version":3,"sources":["notifyFolder/Notify.module.css","serviceWorker.js","addnomberFolder/addNomber.js","createnomberFolder/createNumber.js","contactsFolder/ContactsItem.js","contactsFolder/Contacts.js","filterFolder/Filter.js","notifyFolder/Notification.js","phonebookFolder/Phonebook.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","AddNomber","nomberEditor","type","onClick","createNumber","uuid","ContactsItem","id","name","number","onRemoveTask","key","Contacts","contactsAll","TransitionGroup","component","className","map","CSSTransition","timeout","classNames","Filter","searchAll","Notification","styles","notify","Phonebook","state","contacts","search","notifyChange","setState","notifyTimeout","setTimeout","addContact","phoneNumber","prevState","contact","some","theName","removeContact","contactId","filter","inputChangeName","e","preventDefault","target","value","inputChangeNumber","inputChangeContact","findNumber","persistedContacts","localStorage","getItem","this","JSON","parse","prevProps","setItem","stringify","in","appear","unmountOnExit","onChange","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b066fc18.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"notify\":\"Notify_notify__m2kiy\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function AddNomber({ nomberEditor }) {\r\n    return (\r\n        <div>\r\n            <button type=\"submit\" onClick={nomberEditor}>ДОБАВИТЬ</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nAddNomber.propTypes = {\r\n    nomberEditor: PropTypes.func.isRequired,\r\n  };","import { uuid } from \"uuidv4\";\r\n\r\nexport default function createNumber() {\r\n  return uuid();\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContactsItem = ({ id, name, number, onRemoveTask }) => (\r\n    <li key={id}>\r\n      <p>\r\n        {name} {number}\r\n      </p>\r\n      <button type=\"button\" onClick={() => onRemoveTask(id)}>\r\n        Удалить\r\n      </button>\r\n    </li>\r\n);\r\n\r\nContactsItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onRemoveTask: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsItem;","import React from \"react\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport \"./FadeStyles.css\";\r\nimport ContactsItem from \"./ContactsItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Contacts = ({ contactsAll, onRemoveTask }) => (\r\n<TransitionGroup component=\"ul\" className=\"fade\">\r\n    {contactsAll.map(({ id, name, number }) => (\r\n      <CSSTransition key={id} timeout={250} classNames=\"fade\">\r\n      <ContactsItem id={id} name={name} number={number} onRemoveTask={onRemoveTask} />\r\n      </CSSTransition>\r\n    ))}\r\n  </TransitionGroup>\r\n);\r\n\r\nContacts.propTypes = {\r\n  contactsAll: PropTypes.array.isRequired,\r\n  onRemoveTask: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Contacts;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Filter = ({ searchAll }) => (\r\n  <ul>\r\n    {searchAll.map(({ id, name, number }) => (\r\n      <li key={id}>\r\n        <p>{name} {number}</p>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nFilter.propTypes = {\r\n  searchAll: PropTypes.array.isRequired,\r\n};\r\nexport default Filter;","import React from \"react\";\r\nimport styles from \"./Notify.module.css\";\r\n\r\nconst Notification = () => (\r\n    <p className={styles.notify}>THIS CONTACT ALREADY EXISTS ! </p>\r\n);\r\n\r\nexport default Notification;","import React from \"react\";\r\nimport AddNomber from \"../addnomberFolder/addNomber\";\r\nimport createNumber from \"../createnomberFolder/createNumber\";\r\nimport Contacts from \"../contactsFolder/Contacts\";\r\nimport Filter from \"../filterFolder/Filter\";\r\nimport Notification from \"../notifyFolder/Notification\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport \"./NotifyStyles.css\";\r\nimport \"./MyStyles.css\";\r\n\r\nexport default class Phonebook extends React.Component {\r\n  state = {\r\n    contacts: [\r\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n    ],\r\n    name: \"\",\r\n    number: \"\",\r\n    search: [],\r\n    notify: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const persistedContacts = localStorage.getItem(\"contacts\");\r\n    if (persistedContacts) {\r\n      this.setState({\r\n        contacts: JSON.parse(persistedContacts),\r\n      });\r\n    }\r\n  }\r\n\r\n  notifyChange = () => {\r\n    this.setState({\r\n      notify: true,\r\n    });\r\n  }\r\n\r\n  notifyTimeout = () => {\r\n    setTimeout(() => {\r\n      this.setState({\r\n        notify: false,\r\n      });\r\n    }, 1500);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.contacts !== this.state.contacts) {\r\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\r\n    }\r\n  }\r\n\r\n  addContact = () => {\r\n    const phoneNumber = createNumber();\r\n    this.setState((prevState) => {\r\n      const contactNames = prevState.contacts.map(contact => contact.name);\r\n      if (contactNames.some(theName => theName === prevState.name)) {\r\n        this.notifyChange();\r\n        this.notifyTimeout();\r\n      }\r\n      else return {\r\n        contacts: [\r\n          { id: phoneNumber, name: this.state.name, number: this.state.number },\r\n          ...prevState.contacts,\r\n        ],\r\n      };\r\n    });\r\n  };\r\n\r\n  removeContact = (contactId) => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        contacts: prevState.contacts.filter(({ id }) => id !== contactId),\r\n      };\r\n    });\r\n  };\r\n\r\n  inputChangeName = (e) => {\r\n    e.preventDefault();\r\n    this.setState({ name: e.target.value });\r\n  };\r\n\r\n  inputChangeNumber = (e) => {\r\n    e.preventDefault();\r\n    this.setState({ number: e.target.value });\r\n  };\r\n\r\n  inputChangeContact = (e) => {\r\n    e.preventDefault();\r\n    const findNumber = this.state.contacts.filter(\r\n      (contact) => contact.name === e.target.value\r\n    );\r\n    this.setState({ search: [...findNumber] });\r\n  };\r\n\r\n  render() {\r\n    const { contacts } = this.state;\r\n    return (\r\n      <div>\r\n        <CSSTransition\r\n          in={this.state.notify === true}\r\n          appear={true}\r\n          classNames=\"notify\"\r\n          timeout={5000}\r\n          unmountOnExit\r\n        >\r\n          <Notification className=\"notify\"/>\r\n        </CSSTransition>\r\n        <CSSTransition\r\n          in={true}\r\n          appear={true}\r\n          classNames=\"my\"\r\n          timeout={500}\r\n          unmountOnExit\r\n        >\r\n          <h1>Phonebook</h1>\r\n        </CSSTransition>\r\n        <p>Name</p>\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.name}\r\n          onChange={this.inputChangeName}\r\n        />\r\n      <p>Number</p>\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.number}\r\n          onChange={this.inputChangeNumber}\r\n        />\r\n        {this.state.name && this.state.number && (\r\n          <AddNomber nomberEditor={this.addContact} />\r\n        )}\r\n        <p>Search</p>\r\n        <Filter searchAll={this.state.search} />\r\n        <input type=\"text\" onChange={this.inputChangeContact} />\r\n        <p>Contacts</p>\r\n        <Contacts contactsAll={contacts} onRemoveTask={this.removeContact} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Phonebook from \"./phonebookFolder/Phonebook\";\n\nReactDOM.render(\n    <Phonebook />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}